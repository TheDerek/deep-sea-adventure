{"version":3,"sources":["exampleStates.js","index.js","config.js"],"names":["exampleStates","roundEndState","chips","level","player","plundered","players","index","name","position","isCurrentTurn","plunder","willTurnBack","hasTurnedBack","finished","money","drownedLastRound","gameState","currentPlayerId","rolled","air","max","current","round","availablePlunder","lastTurnState","turnBackState","total","reducedBy","actual","outOfAirState","levels","performedTurnAction","endOfChipsState","endGameState","Chip","props","playerElement","slice","playerElementLevel","length","className","getName","levelElements","map","levelText","i","levelClass","key","AddPlayerForm","state","value","handleChange","bind","handleSubmit","callBack","event","this","setState","target","parentCallBack","preventDefault","onSubmit","type","required","placeholder","onChange","React","Component","Plunder","plunderText","PlayerPlunder","plunderItems","item","index1","index2","Player","playerClass","endClass","Players","playerItems","createElement","GameControl","addPlayerCallBack","onClick","startGameCallBack","currentPlayer","cannotTurnBack","airText","lastRoundText","numPlunder","items","disabled","turnBackPlayer","rollDiceCallback","plunderCount","spaces","getRolledText","movePlayer","button","results","spentPlunder","endGame","canPlunder","currentChip","canDrop","endTurn","dropPlunder","gameEndScore","score","join","restartGame","stateRender","renderAddPlayers","renderPlaying","renderRolled","renderMoved","renderRoundOver","renderGameOver","stats","includes","Game","oldState","localStorage","getItem","config","loadPreviousState","JSON","parse","exampleState","getStartGameState","createChips","generateAvailablePlunder","samePlayers","newState","splice","forEach","callback","stringState","stringify","setItem","console","log","Buffer","byteLength","1","min","2","3","4","x","push","getCurrentPlayer","chipsElements","chip","getCurrentChip","href","handleAddPlayer","handleStartGame","rollDice","l","concat","faces","Math","floor","random","spacesLeftToMove","movePlayerBackwards","movePlayerForwards","j","plunderIndex","nextPlayerId","allFinished","every","endRound","nextPlayer","getNextPlayerId","Object","assign","droppedPlunder","apply","plunderForLevel","plunderCollection","dropped","scoring","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8e5c5a46.chunk.js","sourcesContent":["export const exampleStates = {\n  roundEndState: {\n    chips: [\n      {\n        level: 1,\n        player: null,\n        plundered: false,\n      },\n      {\n        level: 1,\n        player: null,\n        plundered: true,\n      },\n      {\n        level: 1,\n        player: null,\n        plundered: false,\n      },\n      {\n        level: 1,\n        player: null,\n        plundered: true,\n      },\n      {\n        level: 1,\n        player: null,\n        plundered: false,\n      },\n      {\n        level: 1,\n        player: null,\n        plundered: false,\n      },\n      {\n        level: 1,\n        player: null,\n        plundered: true,\n      },\n      {\n        level: 1,\n        player: null,\n        plundered: false,\n      },\n      {\n        level: 2,\n        player: null,\n        plundered: false,\n      },\n      {\n        level: 2,\n        player: null,\n        plundered: false,\n      },\n      {\n        level: 2,\n        player: null,\n        plundered: false,\n      },\n      {\n        level: 2,\n        player: null,\n        plundered: false,\n      },\n      {\n        level: 2,\n        player: null,\n        plundered: false,\n      },\n      {\n        level: 2,\n        player: null,\n        plundered: false,\n      },\n      {\n        level: 2,\n        player: null,\n        plundered: false,\n      },\n      {\n        level: 2,\n        player: null,\n        plundered: false,\n      },\n      {\n        level: 3,\n        player: null,\n        plundered: false,\n      },\n      {\n        level: 3,\n        player: null,\n        plundered: false,\n      },\n      {\n        level: 3,\n        player: null,\n        plundered: false,\n      },\n      {\n        level: 3,\n        player: null,\n        plundered: false,\n      },\n      {\n        level: 3,\n        player: null,\n        plundered: false,\n      },\n      {\n        level: 3,\n        player: null,\n        plundered: false,\n      },\n      {\n        level: 3,\n        player: null,\n        plundered: false,\n      },\n      {\n        level: 3,\n        player: null,\n        plundered: false,\n      },\n      {\n        level: 4,\n        player: null,\n        plundered: false,\n      },\n      {\n        level: 4,\n        player: null,\n        plundered: false,\n      },\n      {\n        level: 4,\n        player: null,\n        plundered: false,\n      },\n      {\n        level: 4,\n        player: null,\n        plundered: false,\n      },\n      {\n        level: 4,\n        player: null,\n        plundered: false,\n      },\n      {\n        level: 4,\n        player: null,\n        plundered: false,\n      },\n      {\n        level: 4,\n        player: null,\n        plundered: false,\n      },\n      {\n        level: 4,\n        player: null,\n        plundered: false,\n      },\n    ],\n    players: [\n      {\n        index: 0,\n        name: \"Derek\",\n        position: 1,\n        isCurrentTurn: true,\n        plunder: [1, 1, 1],\n        willTurnBack: true,\n        hasTurnedBack: true,\n        finished: true,\n        money: 0,\n        drownedLastRound: false,\n      },\n      {\n        index: 1,\n        name: \"John\",\n        position: 1,\n        isCurrentTurn: true,\n        plunder: [],\n        willTurnBack: true,\n        hasTurnedBack: true,\n        finished: true,\n        money: 0,\n        drownedLastRound: false,\n      },\n      {\n        index: 2,\n        name: \"Mike\",\n        position: 2,\n        isCurrentTurn: true,\n        plunder: [],\n        willTurnBack: true,\n        hasTurnedBack: true,\n        finished: true,\n        money: 0,\n        drownedLastRound: true,\n      },\n    ],\n    gameState: \"moved\",\n    currentPlayerId: 0,\n    rolled: 2,\n    air: {\n      max: 25,\n      current: 17,\n    },\n    round: {\n      current: 1,\n      max: 3,\n    },\n    availablePlunder: {\n      \"1\": [0, 0, 1, 1, 2, 2, 3, 3],\n      \"2\": [4, 4, 5, 5, 6, 6, 7, 7],\n      \"3\": [8, 8, 9, 9, 10, 10, 11, 11],\n      \"4\": [12, 12, 13, 13, 14, 14, 15, 15],\n    },\n  },\n  lastTurnState: {\n    chips: [\n      {level: 1, player: null, plundered: false},\n      {level: 1, player: null, plundered: false},\n      {level: 1, player: null, plundered: false},\n      {\n        level: 1,\n        player: {\n          index: 0,\n          name: \"Derek\",\n          position: 3,\n          isCurrentTurn: true,\n          plunder: [1],\n          willTurnBack: false,\n          hasTurnedBack: false,\n          finished: false,\n          money: 0,\n          drownedLastRound: false,\n        },\n        plundered: true,\n      },\n      {level: 1, player: null, plundered: false},\n      {level: 1, player: null, plundered: false},\n      {level: 1, player: null, plundered: false},\n      {level: 1, player: null, plundered: false},\n      {level: 2, player: null, plundered: false},\n      {level: 2, player: null, plundered: false},\n      {level: 2, player: null, plundered: false},\n      {level: 2, player: null, plundered: false},\n      {level: 2, player: null, plundered: false},\n      {level: 2, player: null, plundered: false},\n      {level: 2, player: null, plundered: false},\n      {level: 2, player: null, plundered: false},\n      {level: 3, player: null, plundered: false},\n      {level: 3, player: null, plundered: false},\n      {level: 3, player: null, plundered: false},\n      {level: 3, player: null, plundered: false},\n      {level: 3, player: null, plundered: false},\n      {level: 3, player: null, plundered: false},\n      {level: 3, player: null, plundered: false},\n      {level: 3, player: null, plundered: false},\n      {level: 4, player: null, plundered: false},\n      {level: 4, player: null, plundered: false},\n      {level: 4, player: null, plundered: false},\n      {level: 4, player: null, plundered: false},\n      {level: 4, player: null, plundered: false},\n      {level: 4, player: null, plundered: false},\n      {level: 4, player: null, plundered: false},\n      {level: 4, player: null, plundered: false},\n    ],\n    players: [\n      {\n        index: 0,\n        name: \"Derek\",\n        position: 3,\n        isCurrentTurn: true,\n        plunder: [1],\n        willTurnBack: false,\n        hasTurnedBack: false,\n        finished: false,\n        money: 0,\n        drownedLastRound: false,\n      },\n    ],\n    gameState: \"playing\",\n    currentPlayerId: 0,\n    rolled: 4,\n    air: {max: 25, current: 0},\n    round: {current: 1, max: 3},\n    availablePlunder: {\n      \"1\": [0, 0, 1, 1, 2, 2, 3, 3],\n      \"2\": [4, 4, 5, 5, 6, 6, 7, 7],\n      \"3\": [8, 8, 9, 9, 10, 10, 11, 11],\n      \"4\": [12, 12, 13, 13, 14, 14, 15, 15],\n    },\n  },\n  turnBackState: {\n    chips: [\n      {level: 1, player: null, plundered: false},\n      {level: 1, player: null, plundered: false},\n      {level: 1, player: null, plundered: true},\n      {level: 1, player: null, plundered: true},\n      {level: 1, player: null, plundered: false},\n      {\n        level: 1,\n        player: {\n          index: 1,\n          name: \"john\",\n          position: 5,\n          isCurrentTurn: true,\n          plunder: [1, 1],\n          willTurnBack: true,\n          hasTurnedBack: false,\n          finished: false,\n          money: 0,\n          drownedLastRound: false,\n        },\n        plundered: true,\n      },\n      {level: 1, player: null, plundered: false},\n      {\n        level: 1,\n        player: {\n          index: 0,\n          name: \"derek\",\n          position: 7,\n          isCurrentTurn: false,\n          plunder: [1, 1],\n          willTurnBack: true,\n          hasTurnedBack: true,\n          finished: false,\n          money: 0,\n          drownedLastRound: false,\n        },\n        plundered: true,\n      },\n      {level: 2, player: null, plundered: false},\n      {level: 2, player: null, plundered: false},\n      {level: 2, player: null, plundered: false},\n      {level: 2, player: null, plundered: false},\n      {level: 2, player: null, plundered: false},\n      {level: 2, player: null, plundered: false},\n      {level: 2, player: null, plundered: false},\n      {level: 2, player: null, plundered: false},\n      {level: 3, player: null, plundered: false},\n      {level: 3, player: null, plundered: false},\n      {level: 3, player: null, plundered: false},\n      {level: 3, player: null, plundered: false},\n      {level: 3, player: null, plundered: false},\n      {level: 3, player: null, plundered: false},\n      {level: 3, player: null, plundered: false},\n      {level: 3, player: null, plundered: false},\n      {level: 4, player: null, plundered: false},\n      {level: 4, player: null, plundered: false},\n      {level: 4, player: null, plundered: false},\n      {level: 4, player: null, plundered: false},\n      {level: 4, player: null, plundered: false},\n      {level: 4, player: null, plundered: false},\n      {level: 4, player: null, plundered: false},\n      {level: 4, player: null, plundered: false},\n    ],\n    players: [\n      {\n        index: 0,\n        name: \"derek\",\n        position: 7,\n        isCurrentTurn: false,\n        plunder: [1, 1],\n        willTurnBack: true,\n        hasTurnedBack: true,\n        finished: false,\n        money: 0,\n        drownedLastRound: false,\n      },\n      {\n        index: 1,\n        name: \"john\",\n        position: 5,\n        isCurrentTurn: true,\n        plunder: [1, 1],\n        willTurnBack: true,\n        hasTurnedBack: false,\n        finished: false,\n        money: 0,\n        drownedLastRound: false,\n      },\n    ],\n    gameState: \"moved\",\n    currentPlayerId: 1,\n    rolled: {total: 2, reducedBy: 2, actual: 0},\n    air: {max: 25, current: 21},\n    round: {current: 1, max: 3},\n    availablePlunder: {\n      \"1\": [0, 0, 1, 1, 2, 2, 3, 3],\n      \"2\": [4, 4, 5, 5, 6, 6, 7, 7],\n      \"3\": [8, 8, 9, 9, 10, 10, 11, 11],\n      \"4\": [12, 12, 13, 13, 14, 14, 15, 15],\n    },\n  },\n  outOfAirState: {\n    chips: [\n      {levels: [1], player: null, plundered: false},\n      {levels: [1], player: null, plundered: false},\n      {levels: [1], player: null, plundered: true},\n      {levels: [1], player: null, plundered: false},\n      {levels: [1], player: null, plundered: true},\n      {levels: [1], player: null, plundered: false},\n      {levels: [1], player: null, plundered: false},\n      {levels: [1], player: null, plundered: true},\n      {levels: [2], player: null, plundered: true},\n      {\n        levels: [2],\n        player: {\n          index: 0,\n          name: \"dere\",\n          position: 9,\n          isCurrentTurn: true,\n          plunder: [[1], [1], [1], [2], [2]],\n          willTurnBack: false,\n          hasTurnedBack: false,\n          finished: false,\n          money: 0,\n          drownedLastRound: false,\n          performedTurnAction: false,\n        },\n        plundered: true,\n      },\n      {levels: [2], player: null, plundered: false},\n      {levels: [2], player: null, plundered: false},\n      {levels: [2], player: null, plundered: false},\n      {levels: [2], player: null, plundered: false},\n      {levels: [2], player: null, plundered: false},\n      {levels: [2], player: null, plundered: false},\n      {levels: [3], player: null, plundered: false},\n      {levels: [3], player: null, plundered: false},\n      {levels: [3], player: null, plundered: false},\n      {levels: [3], player: null, plundered: false},\n      {levels: [3], player: null, plundered: false},\n      {levels: [3], player: null, plundered: false},\n      {levels: [3], player: null, plundered: false},\n      {levels: [3], player: null, plundered: false},\n      {levels: [4], player: null, plundered: false},\n      {levels: [4], player: null, plundered: false},\n      {levels: [4], player: null, plundered: false},\n      {levels: [4], player: null, plundered: false},\n      {levels: [4], player: null, plundered: false},\n      {levels: [4], player: null, plundered: false},\n      {levels: [4], player: null, plundered: false},\n      {levels: [4], player: null, plundered: false},\n    ],\n    players: [\n      {\n        index: 0,\n        name: \"dere\",\n        position: 9,\n        isCurrentTurn: true,\n        plunder: [[1], [1], [1], [2], [2]],\n        willTurnBack: false,\n        hasTurnedBack: false,\n        finished: false,\n        money: 0,\n        drownedLastRound: false,\n        performedTurnAction: false,\n      },\n    ],\n    gameState: \"rolled\",\n    currentPlayerId: 0,\n    rolled: {total: 4, reducedBy: 5, actual: 0},\n    air: {max: 25, current: -4},\n    round: {current: 1, max: 3},\n    availablePlunder: {\n      \"1\": [0, 0, 1, 1, 2, 2, 3, 3],\n      \"2\": [4, 4, 5, 5, 6, 6, 7, 7],\n      \"3\": [8, 8, 9, 9, 10, 10, 11, 11],\n      \"4\": [12, 12, 13, 13, 14, 14, 15, 15],\n    },\n  },\n  endOfChipsState: {\n    chips: [\n      {levels: [1], player: null, plundered: false},\n      {levels: [1], player: null, plundered: false},\n      {levels: [1], player: null, plundered: false},\n      {levels: [1], player: null, plundered: false},\n      {levels: [1], player: null, plundered: false},\n      {levels: [1], player: null, plundered: false},\n      {levels: [1], player: null, plundered: false},\n      {levels: [1], player: null, plundered: false},\n      {levels: [2], player: null, plundered: false},\n      {levels: [2], player: null, plundered: false},\n      {levels: [2], player: null, plundered: false},\n      {levels: [2], player: null, plundered: false},\n      {levels: [2], player: null, plundered: false},\n      {levels: [2], player: null, plundered: false},\n      {levels: [2], player: null, plundered: false},\n      {levels: [2], player: null, plundered: false},\n      {levels: [3], player: null, plundered: false},\n      {levels: [3], player: null, plundered: false},\n      {levels: [3], player: null, plundered: false},\n      {levels: [3], player: null, plundered: false},\n      {levels: [3], player: null, plundered: false},\n      {levels: [3], player: null, plundered: false},\n      {levels: [3], player: null, plundered: false},\n      {levels: [3], player: null, plundered: false},\n      {levels: [4], player: null, plundered: false},\n      {\n        levels: [4],\n        player: {\n          index: 0,\n          name: \"asd\",\n          position: 25,\n          isCurrentTurn: false,\n          plunder: [],\n          willTurnBack: false,\n          hasTurnedBack: false,\n          finished: false,\n          money: 0,\n          drownedLastRound: false,\n          performedTurnAction: false,\n        },\n        plundered: false,\n      },\n      {levels: [4], player: null, plundered: false},\n      {levels: [4], player: null, plundered: false},\n      {levels: [4], player: null, plundered: false},\n      {levels: [4], player: null, plundered: false},\n      {\n        levels: [4],\n        player: {\n          index: 1,\n          name: \"asd\",\n          position: 30,\n          isCurrentTurn: true,\n          plunder: [],\n          willTurnBack: false,\n          hasTurnedBack: false,\n          finished: false,\n          money: 0,\n          drownedLastRound: false,\n          performedTurnAction: false,\n        },\n        plundered: false,\n      },\n      {levels: [4], player: null, plundered: false},\n    ],\n    players: [\n      {\n        index: 0,\n        name: \"asd\",\n        position: 25,\n        isCurrentTurn: false,\n        plunder: [],\n        willTurnBack: false,\n        hasTurnedBack: false,\n        finished: false,\n        money: 0,\n        drownedLastRound: false,\n        performedTurnAction: false,\n      },\n      {\n        index: 1,\n        name: \"asd\",\n        position: 30,\n        isCurrentTurn: true,\n        plunder: [],\n        willTurnBack: false,\n        hasTurnedBack: false,\n        finished: false,\n        money: 0,\n        drownedLastRound: false,\n        performedTurnAction: false,\n      },\n    ],\n    gameState: \"moved\",\n    currentPlayerId: 1,\n    rolled: {total: 6, reducedBy: 0, actual: 6},\n    air: {max: 25, current: 25},\n    round: {current: 1, max: 3},\n    availablePlunder: {\n      \"1\": [0, 0, 1, 1, 2, 2, 3, 3],\n      \"2\": [4, 4, 5, 5, 6, 6, 7, 7],\n      \"3\": [8, 8, 9, 9, 10, 10, 11, 11],\n      \"4\": [12, 12, 13, 13, 14, 14, 15, 15],\n    },\n  },\n  endGameState: {\n    \"chips\": [{\"levels\": [1], \"player\": null, \"plundered\": false}, {\n      \"levels\": [1],\n      \"player\": {\n        \"index\": 1,\n        \"name\": \"Johnathon\",\n        \"position\": 1,\n        \"isCurrentTurn\": true,\n        \"plunder\": [[1]],\n        \"willTurnBack\": false,\n        \"hasTurnedBack\": false,\n        \"finished\": false,\n        \"money\": 100,\n        \"drownedLastRound\": false,\n        \"performedTurnAction\": false\n      },\n      \"plundered\": true\n    }, {\"levels\": [1], \"player\": null, \"plundered\": true}, {\n      \"levels\": [1],\n      \"player\": {\n        \"index\": 0,\n        \"name\": \"Derek\",\n        \"position\": 3,\n        \"isCurrentTurn\": false,\n        \"plunder\": [[1], [1]],\n        \"willTurnBack\": false,\n        \"hasTurnedBack\": false,\n        \"finished\": false,\n        \"money\": 10,\n        \"drownedLastRound\": false,\n        \"performedTurnAction\": false\n      },\n      \"plundered\": true\n    }, {\"levels\": [1], \"player\": null, \"plundered\": false}, {\n      \"levels\": [1],\n      \"player\": null,\n      \"plundered\": false\n    }, {\"levels\": [1], \"player\": null, \"plundered\": false}, {\n      \"levels\": [1],\n      \"player\": null,\n      \"plundered\": false\n    }, {\"levels\": [2], \"player\": null, \"plundered\": false}, {\n      \"levels\": [2],\n      \"player\": null,\n      \"plundered\": false\n    }, {\"levels\": [2], \"player\": null, \"plundered\": false}, {\n      \"levels\": [2],\n      \"player\": null,\n      \"plundered\": false\n    }, {\"levels\": [2], \"player\": null, \"plundered\": false}, {\n      \"levels\": [2],\n      \"player\": null,\n      \"plundered\": false\n    }, {\"levels\": [2], \"player\": null, \"plundered\": false}, {\n      \"levels\": [2],\n      \"player\": null,\n      \"plundered\": false\n    }, {\"levels\": [3], \"player\": null, \"plundered\": false}, {\n      \"levels\": [3],\n      \"player\": null,\n      \"plundered\": false\n    }, {\"levels\": [3], \"player\": null, \"plundered\": false}, {\n      \"levels\": [3],\n      \"player\": null,\n      \"plundered\": false\n    }, {\"levels\": [3], \"player\": null, \"plundered\": false}, {\n      \"levels\": [3],\n      \"player\": null,\n      \"plundered\": false\n    }, {\"levels\": [3], \"player\": null, \"plundered\": false}, {\n      \"levels\": [3],\n      \"player\": null,\n      \"plundered\": false\n    }, {\"levels\": [4], \"player\": null, \"plundered\": false}, {\n      \"levels\": [4],\n      \"player\": null,\n      \"plundered\": false\n    }, {\"levels\": [4], \"player\": null, \"plundered\": false}, {\n      \"levels\": [4],\n      \"player\": null,\n      \"plundered\": false\n    }, {\"levels\": [4], \"player\": null, \"plundered\": false}, {\n      \"levels\": [4],\n      \"player\": null,\n      \"plundered\": false\n    }, {\"levels\": [4], \"player\": null, \"plundered\": false}, {\"levels\": [4], \"player\": null, \"plundered\": false}],\n    \"players\": [{\n      \"index\": 0,\n      \"name\": \"Derek\",\n      \"position\": 3,\n      \"isCurrentTurn\": false,\n      \"plunder\": [[1], [1]],\n      \"willTurnBack\": false,\n      \"hasTurnedBack\": false,\n      \"finished\": false,\n      \"money\": 100,\n      \"drownedLastRound\": false,\n      \"performedTurnAction\": false\n    },\n    {\n      \"index\": 1,\n      \"name\": \"Johnathon\",\n      \"position\": 1,\n      \"isCurrentTurn\": true,\n      \"plunder\": [[1]],\n      \"willTurnBack\": false,\n      \"hasTurnedBack\": false,\n      \"finished\": false,\n      \"money\": 50,\n      \"drownedLastRound\": false,\n      \"performedTurnAction\": false\n    },\n    {\n      \"index\": 2,\n      \"name\": \"Peter Parker\",\n      \"position\": 4,\n      \"isCurrentTurn\": true,\n      \"plunder\": [[1]],\n      \"willTurnBack\": false,\n      \"hasTurnedBack\": false,\n      \"finished\": false,\n      \"money\": 50,\n      \"drownedLastRound\": false,\n      \"performedTurnAction\": false\n    },\n      {\n        \"index\": 3,\n        \"name\": \"Peter Porker\",\n        \"position\": 4,\n        \"isCurrentTurn\": true,\n        \"plunder\": [[1]],\n        \"willTurnBack\": false,\n        \"hasTurnedBack\": false,\n        \"finished\": false,\n        \"money\": 110,\n        \"drownedLastRound\": false,\n        \"performedTurnAction\": false\n      }\n    ],\n    \"gameState\": \"playing\",\n    \"currentPlayerId\": 1,\n    \"rolled\": {\"total\": 2, \"reducedBy\": 1, \"actual\": 1},\n    \"air\": {\"max\": 23, \"current\": 0},\n    \"round\": {\"current\": 3, \"max\": 3},\n    \"availablePlunder\": {\n      \"1\": [0, 0, 1, 1, 2, 2, 3, 3],\n      \"2\": [4, 4, 5, 5, 6, 6, 7, 7],\n      \"3\": [8, 8, 9, 9, 10, 10, 11, 11],\n      \"4\": [12, 12, 13, 13, 14, 14, 15, 15]\n    }\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport {exampleStates} from \"./exampleStates.js\";\nimport {config} from \"./config.js\";\n\nfunction Chip(props) {\n  let playerElement = null;\n  let levels = props.levels.slice();\n  let playerElementLevel =\n    \"chip-player chip-player-\" + (props.plundered ? \"1\" : props.levels.length);\n  if (props.player) {\n    playerElement = (\n      <div className={playerElementLevel}>{getName(props.player)}</div>\n    );\n  } else {\n    playerElement = <div className={playerElementLevel}></div>;\n  }\n\n  // Hack to display only one title bar if the tile is plundered\n  if (props.plundered) {\n    levels = props.levels.slice(0, 1);\n  }\n  const levelElements = levels.map((level, index) => {\n    let levelText = \"\";\n    if (props.plundered) {\n      levelText = \"Plundered\";\n    } else {\n      for (let i = 0; i < level; i++) {\n        levelText += \"•\";\n      }\n    }\n    let levelClass =\n      \"chip-level chip-level-\" + (props.plundered ? \"plundered\" : level);\n\n    return (\n      <div key={index} className={levelClass}>\n        {levelText}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"chip\">\n      {levelElements}\n      {playerElement}\n    </div>\n  );\n}\n\nclass AddPlayerForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: \"\"};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit(props.callBack).bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(parentCallBack) {\n    return (event) => {\n      event.preventDefault();\n      parentCallBack(this.state.value);\n\n      this.setState({value: \"\"});\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"content-box\">\n        <div className=\"box-title\">Add player</div>\n        <form className=\"box-content\" onSubmit={this.handleSubmit}>\n          <label>Player name</label>\n          <input\n            type=\"text\"\n            required=\"required\"\n            placeholder='Johnathon \"JoJo\" Joestar'\n            value={this.state.value}\n            onChange={this.handleChange}\n          />\n          <input type=\"submit\" value=\"Add player to game\"/>\n        </form>\n      </div>\n    );\n  }\n}\n\nfunction Plunder(props) {\n  let plunderText = \"\";\n  for (let i = 0; i < props.level; i++) {\n    plunderText += \"•\";\n  }\n\n  let className = \"plunder chip-level-\" + props.level;\n\n  return <div className={className}>{plunderText}</div>;\n}\n\nfunction PlayerPlunder(props) {\n  let plunderItems = props.plunder.map((item, index1) => (\n    <span key={index1} className={item.length > 1 ? \"plunder-collection\" : \"\"}>\n      {item.map((level, index2) => {\n        return <Plunder key={`${index1}-${index2}`} level={level}/>;\n      })}\n    </span>\n  ));\n\n  return <div className=\"stat-value\">{plunderItems}</div>;\n}\n\nfunction getName(player) {\n  if (player.hasTurnedBack) {\n    return \"← \" + player.name;\n  } else {\n    return player.name + \" →\";\n  }\n}\n\nfunction Player(props) {\n  let playerClass = \"stat\";\n  if (props.player.isCurrentTurn) {\n    playerClass += \" stat-highlighted\";\n  }\n  let endClass = \"stat-end\";\n  if (props.player.plunder.length === 0) {\n    endClass += \" stat-empty\";\n  }\n\n  return (\n    <div className={playerClass}>\n      <div className=\"stat-title\">{getName(props.player)}</div>\n      <PlayerPlunder plunder={props.player.plunder}/>\n      <div className={endClass}>£{props.player.money}</div>\n    </div>\n  );\n}\n\nfunction Players(props) {\n  let players = props.players;\n  let playerItems = players.map((player, index) =>\n    React.createElement(Player, {key: index, player: player})\n  );\n  return (\n    <div className=\"players\">\n      <div className=\"players-container\">\n        <h2 className=\"players-title\">Players</h2>\n        <div className=\"players-boxes\">{playerItems}</div>\n      </div>\n    </div>\n  );\n}\n\nclass GameControl extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  renderAddPlayers() {\n    return (\n      <div>\n        <AddPlayerForm callBack={this.props.addPlayerCallBack}/>\n        <button\n          className=\"start-game-button\"\n          onClick={this.props.startGameCallBack}\n        >\n          Start Game\n        </button>\n      </div>\n    );\n  }\n\n  renderPlaying() {\n    let player = this.props.currentPlayer;\n    let cannotTurnBack =\n      player.position < 0 || player.hasTurnedBack || player.willTurnBack;\n    let airText = null;\n    let lastRoundText = null;\n\n    if (player.plunder.length > 0) {\n      let numPlunder = player.plunder.length;\n      let items = numPlunder > 1 ? \"items\" : \"item\";\n      airText = (\n        <p>\n          Reduced air by {numPlunder} because {getName(player)} holds{\" \"}\n          {numPlunder} {items} of plunder\n        </p>\n      );\n    } else {\n      airText = (\n        <p>\n          {`Not reducing air because ${getName(player)} holds no rune chips`}\n        </p>\n      );\n    }\n\n    if (this.props.air.current <= 0) {\n      lastRoundText = (\n        <p>\n          The submarine has run out of air for the divers! This will be the{\" \"}\n          <b>last turn of the round</b>. Hopefully {player.name} manages to make\n          it back to the submarine!\n        </p>\n      );\n    }\n\n    return (\n      <div className=\"content-box\">\n        <div className=\"box-title\">🎲 Roll the dice</div>\n        <div className=\"box-content\">\n          {airText}\n          {lastRoundText}\n          <button disabled={cannotTurnBack} onClick={this.props.turnBackPlayer}>\n            Make {player.name} turn back after moving\n          </button>\n          <button onClick={this.props.rollDiceCallback}>\n            Roll the dice for {player.name}\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  getRolledText(rolled, player) {\n    if (rolled.reducedBy === 0) {\n      return (\n        <p>\n          {player.name} rolled a <b>{rolled.actual}</b>.\n        </p>\n      );\n    }\n\n    let plunderCount = player.plunder.length;\n    let items = plunderCount > 1 ? `${plunderCount} items` : \"1 item\";\n\n    if (rolled.actual === 0) {\n      return (\n        <p>\n          {player.name} rolled a {rolled.total}. However by being exceptionally\n          greedy and holding {items} of plunder they cannot move an inch,\n          resulting in them being <b>completely stuck for this turn</b>.\n        </p>\n      );\n    }\n\n    if (rolled.reducedBy > 0) {\n      let spaces = rolled.actual > 1 ? \"spaces\" : \"space\";\n      return (\n        <p>\n          {player.name} rolled a {rolled.total}. However they are currently\n          holding {items} of plunder, meaning they can only move{\" \"}\n          <em>\n            <small>\n              ({rolled.total}-{rolled.reducedBy}=)\n            </small>\n          </em>\n          <b>{rolled.actual}</b> {spaces}.\n        </p>\n      );\n    }\n  }\n\n  renderRolled() {\n    let player = this.props.currentPlayer;\n\n    return (\n      <div className=\"content-box\">\n        <div className=\"box-title\">🏊 Move the diver</div>\n        <div className=\"box-content\">\n          {this.getRolledText(this.props.rolled, player)}\n          <button onClick={this.props.movePlayer}>\n            Move {player.name} {this.props.rolled.actual} spaces.\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  renderRoundOver() {\n    let results = this.props.players.map((player, index) => {\n      if (player.drownedLastRound) {\n        return (\n          <li key={index}>\n            <p>\n              <b>{player.name}</b> failed to make it back to the submarine\n              before the air ran out. Any plunder they were holding sank to the\n              bottom of the ocean as they made a frenzied dash to the submarine\n              before they drowned.\n            </p>\n            <p>\n              Because of this their gains for the expedition remain{\" \"}\n              <b>£{player.money}</b>.\n            </p>\n          </li>\n        );\n      }\n\n      if (player.spentPlunder.length === 0) {\n        return (\n          <li key={index}>\n            <p>\n              <b>{player.name}</b> made it back to the submarine safe and sound.\n              However they forgot to plunder any treasure along the way, making\n              their expedition kind of pointless.\n            </p>\n            <p>\n              Because of this their gains for the expedition remain <b>£0</b>.\n            </p>\n          </li>\n        );\n      }\n\n      let plunderItems = player.spentPlunder.map((plunder) => {\n        return (\n          <li key={index}>\n            A level {plunder.level} treasure worth £{plunder.value}\n          </li>\n        );\n      });\n\n      return (\n        <li key={index}>\n          <p>\n            <b>{player.name}</b> successfully made it back to the submarine\n            before the air ran out and with plunder to boot! They managed to\n            gather:\n          </p>\n          <ul>{plunderItems}</ul>\n          Bringing their total gains for the expedition up to{\" \"}\n          <b>£{player.money}</b>.\n        </li>\n      );\n    });\n\n    let button;\n    if (this.props.round.current <= this.props.round.max) {\n      button = (\n        <button onClick={this.props.startGameCallBack}>Next round</button>\n      );\n    } else {\n      button = <button onClick={this.props.endGame}>End game</button>;\n    }\n\n    return (\n      <div className=\"content-box\">\n        <div className=\"box-title\">\n          Results for round {this.props.round.current - 1}/\n          {this.props.round.max}\n        </div>\n        <div className=\"box-content\">\n          <ul>{results}</ul>\n          {button}\n        </div>\n      </div>\n    );\n  }\n\n  renderMoved() {\n    let player = this.props.currentPlayer;\n    let canPlunder =\n      !this.props.currentChip.plundered && !player.performedTurnAction;\n    let canDrop =\n      this.props.currentChip.plundered &&\n      player.plunder.length > 0 &&\n      !player.performedTurnAction;\n\n    if (player.finished) {\n      return (\n        <div className=\"content-box\">\n          <div className=\"box-title\">Made it back safe and sound</div>\n          <div className=\"box-content\">\n            <p>\n              Congratulations {getName(player)} made it back to the submarine\n            </p>\n            <button onClick={this.props.endTurn}>End turn</button>\n          </div>\n        </div>\n      );\n    }\n\n    let dropPlunder = null;\n    if (canDrop) {\n      dropPlunder = player.plunder.map((plunder, index) => (\n        <button\n          key={index}\n          disabled={!canDrop}\n          onClick={this.props.dropPlunder(index)}\n        >\n          Drop plunder &nbsp;\n          <PlayerPlunder plunder={[plunder]}/>\n        </button>\n      ));\n    }\n\n    return (\n      <div className=\"content-box\">\n        <div className=\"box-title\">💰 Commence plundering</div>\n        <div className=\"box-content\">\n          <p>\n            {getName(player)} has moved to chip {player.position + 1} !\n          </p>\n          <button disabled={!canPlunder} onClick={this.props.plunder}>\n            Plunder current location\n          </button>\n          {dropPlunder}\n          <button onClick={this.props.endTurn}>End turn</button>\n        </div>\n      </div>\n    );\n  }\n\n  renderGameOver() {\n    return (\n      <div className=\"content-box\">\n        <div className=\"box-title\">Game over</div>\n        <div className=\"box-content\">\n          <ol>\n            {\n              this.props.gameEndScore.map((score) => (\n                <li key={score}>\n                  {score.players.join(\", \")} with £{score.money}\n                </li>\n              ))\n            }\n          </ol>\n          <p>Thanks for playing!</p>\n          <button onClick={this.props.restartGame(true)}>\n            Restart the game with the <b>same players</b>\n          </button>\n          <button onClick={this.props.restartGame(false)}>\n            Restart the game with <b>new players</b>\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  render() {\n    let stateRender = <p>Error: State not specified</p>;\n\n    if (this.props.gameState === \"pregame\") {\n      stateRender = this.renderAddPlayers();\n    }\n\n    if (this.props.gameState === \"playing\") {\n      stateRender = this.renderPlaying();\n    }\n\n    if (this.props.gameState === \"rolled\") {\n      stateRender = this.renderRolled();\n    }\n\n    if (this.props.gameState === \"moved\") {\n      stateRender = this.renderMoved();\n    }\n\n    if (this.props.gameState === \"roundOver\") {\n      stateRender = this.renderRoundOver();\n    }\n\n    if (this.props.gameState === \"gameOver\") {\n      stateRender = this.renderGameOver();\n    }\n\n    let stats = null;\n    if (![\"pregame\", \"roundOver\", \"gameOver\"].includes(this.props.gameState)) {\n      stats = (\n        <div className=\"stats\">\n          <div className=\"stat\">\n            <div className=\"stat-title\">Round</div>\n            <div className=\"stat-value\">\n              {this.props.round.current} / {this.props.round.max}\n            </div>\n          </div>\n          <div className=\"stat\">\n            <div className=\"stat-title\">Current turn</div>\n            <div className=\"stat-value\">\n              {getName(this.props.currentPlayer)}\n            </div>\n          </div>\n          <div className=\"stat\">\n            <div className=\"stat-title\">Remaining air</div>\n            <div className=\"stat-value\">\n              {this.props.air.current} / {this.props.air.max}\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"game-control\">\n        <h2>Game Control</h2>\n        {stats}\n        {stateRender}\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let oldState = localStorage.getItem(\"gameState\");\n\n    if (config.loadPreviousState && oldState) {\n      this.state = JSON.parse(oldState);\n    } else if (config.exampleState) {\n      this.state = exampleStates[config.exampleState];\n    } else {\n      this.state = this.getStartGameState();\n    }\n  }\n\n  getStartGameState() {\n    return {\n      chips: this.createChips(),\n      players: [],\n      gameState: \"pregame\",\n      currentPlayerId: null,\n      rolled: null,\n      air: {current: 25, max: 25},\n      round: {current: 1, max: 3},\n      availablePlunder: this.generateAvailablePlunder(),\n      gameEndScore: null,\n    };\n  }\n\n  restartGame(samePlayers) {\n    const newState = this.getStartGameState();\n\n    if (samePlayers) {\n      const players = this.state.players.splice();\n\n      // Reset the money of each player\n      players.forEach(player => player.money = 0);\n      newState.players = players;\n    }\n\n    return () => {\n      this.setState(newState);\n    }\n  }\n\n  setState(newState, callback = () => {\n  }) {\n    super.setState(newState, () => {\n      callback();\n\n      let stringState = JSON.stringify(this.state);\n      localStorage.setItem(\"gameState\", stringState);\n      console.log(\n        \"Saved \" +\n        Buffer.byteLength(stringState) +\n        \" bytes of memory to local storage\"\n      );\n    });\n  }\n\n  generateAvailablePlunder() {\n    let amountPerValue = 2;\n    let levels = {\n      1: {min: 0, max: 3},\n      2: {min: 4, max: 7},\n      3: {min: 8, max: 11},\n      4: {min: 12, max: 15},\n    };\n\n    let plunder = {};\n    for (const level in levels) {\n      plunder[level] = [];\n      for (let x = levels[level].min; x <= levels[level].max; x++) {\n        for (let i = 0; i < amountPerValue; i++) {\n          plunder[level].push(x);\n        }\n      }\n    }\n\n    return plunder;\n  }\n\n  getCurrentPlayer() {\n    return this.state.players[this.state.currentPlayerId];\n  }\n\n  getCurrentChip() {\n    let currentPlayer = this.getCurrentPlayer();\n    let currentChip = null;\n    if (currentPlayer && currentPlayer.position >= 0) {\n      currentChip = this.state.chips[currentPlayer.position];\n    }\n\n    return currentChip;\n  }\n\n  render() {\n    let chips = this.state.chips;\n    let chipsElements = chips.map((chip, index) =>\n      React.createElement(Chip, {\n        key: index,\n        position: index + 1,\n        levels: chip.levels,\n        player: chip.player,\n        plundered: chip.plundered,\n      })\n    );\n\n    let currentPlayer = this.getCurrentPlayer();\n    let currentChip = this.getCurrentChip();\n\n    return (\n      <div>\n        <header>\n          <h1>Deep Sea Adventure</h1>\n          <p>\n            Unofficial web implementation by{\" \"}\n            <a href=\"https://github.com/TheDerek\">TheDerek</a>\n          </p>\n          <p>\n            Original game by <a href=\"https://oinkgames.com\">Oink Games</a>\n          </p>\n          <p>\n            Best played with friends in the same room or via your favourite\n            streaming software\n          </p>\n        </header>\n        <div className=\"chips\">{chipsElements}</div>\n        <GameControl\n          gameState={this.state.gameState}\n          addPlayerCallBack={this.handleAddPlayer.bind(this)}\n          startGameCallBack={this.handleStartGame.bind(this)}\n          currentPlayer={currentPlayer}\n          currentChip={currentChip}\n          rollDiceCallback={this.rollDice.bind(this)}\n          rolled={this.state.rolled}\n          movePlayer={this.movePlayer.bind(this)}\n          plunder={this.plunder.bind(this)}\n          endTurn={this.endTurn.bind(this)}\n          endGame={this.endGame.bind(this)}\n          turnBackPlayer={this.turnBackPlayer.bind(this)}\n          round={this.state.round}\n          air={this.state.air}\n          players={this.state.players}\n          dropPlunder={this.dropPlunder.bind(this)}\n          gameEndScore={this.state.gameEndScore}\n          restartGame={this.restartGame.bind(this)}\n        />\n        <Players players={this.state.players}/>\n      </div>\n    );\n  }\n\n  createChips() {\n    let chips = [];\n    let levels = [1, 2, 3, 4];\n\n    for (let l of levels) {\n      for (var i = 0; i < 8; i++) {\n        chips.push({\n          levels: [l],\n          player: null,\n          plundered: false,\n        });\n      }\n    }\n\n    return chips;\n  }\n\n  handleAddPlayer(name) {\n    this.setState({\n      players: this.state.players.concat([\n        {\n          index: this.state.players.length,\n          name: name,\n          position: -1, // On the sub\n          isCurrentTurn: false,\n          plunder: [],\n          // willTurnBack will always be true if hasTurnedBack is true\n          willTurnBack: false,\n          hasTurnedBack: false,\n          finished: false,\n          money: 0,\n          drownedLastRound: false,\n          performedTurnAction: false,\n        },\n      ]),\n    });\n  }\n\n  rollDice() {\n    const faces = [1, 1, 2, 2, 3, 3];\n\n    let dice1 = faces[Math.floor(Math.random() * faces.length)];\n    let dice2 = faces[Math.floor(Math.random() * faces.length)];\n\n    let total = dice1 + dice2;\n    let reducedBy = this.getCurrentPlayer().plunder.length;\n    let actual = total - reducedBy;\n\n    if (actual < 0) {\n      actual = 0;\n    }\n\n    this.setState({\n      gameState: \"rolled\",\n      rolled: {\n        total: total,\n        reducedBy: reducedBy,\n        actual: actual,\n      },\n    });\n  }\n\n  movePlayer() {\n    const players = this.state.players.slice();\n    const player = players[this.state.currentPlayerId];\n    const chips = this.state.chips.slice();\n    let spacesLeftToMove = this.state.rolled.actual;\n    let movingBack = player.hasTurnedBack;\n\n    if (spacesLeftToMove !== 0) {\n      // Remove the player from the chip they started on\n      if (player.position >= 0) {\n        chips[player.position].player = null;\n      }\n\n      if (player.hasTurnedBack) {\n        this.movePlayerBackwards(player, chips, spacesLeftToMove);\n      } else {\n        this.movePlayerForwards(player, chips, spacesLeftToMove);\n      }\n    }\n\n    this.setState({\n      gameState: \"moved\",\n      players: players,\n      chips: chips,\n    });\n  }\n\n  movePlayerForwards(player, chips, spacesLeftToMove) {\n    for (let i = player.position + 1; ; i++) {\n      if (i >= chips.length - 1) {\n        // Walk backwards from the end and place the player on the closest\n        // non-occupied spot\n        for (let j = chips.length - 1; j >= 0; j--) {\n          let chip = chips[j];\n\n          if (chip.player) {\n            continue;\n          }\n\n          player.position = j;\n          chips[j].player = player;\n          return;\n        }\n      }\n\n      let chip = chips[i];\n\n      // Skip this chip if someone is on it\n      if (chip.player) {\n        continue;\n      }\n\n      spacesLeftToMove -= 1;\n\n      if (spacesLeftToMove === 0) {\n        player.position = i;\n        chip.player = player;\n        return;\n      }\n    }\n  }\n\n  movePlayerBackwards(player, chips, spacesLeftToMove) {\n    for (let i = player.position - 1; ; i--) {\n      let chip = chips[i];\n\n      // Player has successfully made it back to the submarine\n      if (i < 0) {\n        player.finished = true;\n        break;\n      }\n\n      // Skip this chip if someone is on it\n      if (chip.player) {\n        continue;\n      }\n\n      spacesLeftToMove -= 1;\n\n      if (spacesLeftToMove === 0) {\n        player.position = i;\n        chip.player = player;\n\n        break;\n      }\n    }\n  }\n\n  dropPlunder(plunderIndex) {\n    return () => {\n      let players = this.state.players.slice();\n      let player = players[this.state.currentPlayerId];\n      let chips = this.state.chips.slice();\n      let chip = chips[player.position];\n\n      player.performedTurnAction = true;\n      chip.levels = player.plunder.splice(plunderIndex, 1);\n      chip.plundered = false;\n\n      this.setState({\n        players: players,\n        chips: chips,\n      });\n    };\n  }\n\n  handleStartGame() {\n    // Randomly choose the first player\n    let nextPlayerId = Math.floor(Math.random() * this.state.players.length);\n\n    let players = this.state.players.slice();\n    players.forEach((player) => (player.drownedLastRound = false));\n    players[nextPlayerId].isCurrentTurn = true;\n\n    this.setState({\n      gameState: \"playing\",\n      currentPlayerId: nextPlayerId,\n      players: players,\n    });\n  }\n\n  plunder() {\n    let players = this.state.players.slice();\n    let chips = this.state.chips.slice();\n\n    let player = players[this.state.currentPlayerId];\n    let chip = chips[player.position];\n\n    chip.plundered = true;\n    player.plunder.push(chip.levels);\n    player.performedTurnAction = true;\n\n    this.setState({\n      chips: chips,\n      players: players,\n    });\n  }\n\n  endTurn() {\n    let players = this.state.players.slice();\n    let allFinished = players.every((player) => player.finished);\n\n    // End the round if we have run out of air\n    if (this.state.air.current <= 0) {\n      return this.endRound();\n    }\n\n    // End the round if all players make it back to the submarine\n    if (allFinished) {\n      return this.endRound();\n    }\n\n    let currentPlayer = players[this.state.currentPlayerId];\n    currentPlayer.isCurrentTurn = false;\n    currentPlayer.performedTurnAction = false;\n    if (currentPlayer.willTurnBack) {\n      currentPlayer.hasTurnedBack = true;\n    }\n\n    let nextPlayerId = this.state.currentPlayerId;\n    let nextPlayer = null;\n    do {\n      nextPlayerId = this.getNextPlayerId(nextPlayerId);\n      nextPlayer = players[nextPlayerId];\n    } while (nextPlayer.finished);\n\n    nextPlayer.isCurrentTurn = true;\n\n    // Reduce air for the next player's plunder#\n    let air = {\n      max: this.state.air.max,\n      current: this.state.air.current - nextPlayer.plunder.length,\n    };\n\n    this.setState({\n      gameState: \"playing\",\n      currentPlayerId: nextPlayerId,\n      air: air,\n    });\n  }\n\n  endRound() {\n    let players = this.state.players.slice();\n    let chips = this.state.chips.slice();\n    let availablePlunder = Object.assign({}, this.state.availablePlunder);\n    let droppedPlunder = [];\n\n    // Reset players and add money\n    for (let player of players) {\n      // Give the player money if they managed to finish\n      if (player.finished) {\n        // Turn plunder into money\n        player.spentPlunder = [].concat.apply([], player.plunder).map((plunder) => {\n          // plunder is either 1, 2 or 3\n\n          // Get a random item of plunder corresponding to the level\n          // of plunder the player is holding\n          let plunderForLevel = availablePlunder[plunder];\n\n          // Remove the plunder from the global store and add it to the\n          // players wealth\n          let value = plunderForLevel.splice(\n            Math.floor(Math.random() * plunderForLevel.length),\n            1\n          )[0];\n\n          player.money += value;\n\n          return {\n            level: plunder,\n            value: value,\n          };\n        });\n      } else {\n        // Drown the player if they didn't make it back to the submarine\n        player.drownedLastRound = true;\n\n        // Their plunder drops to the bottom of the ocean\n        for (const plunderCollection of player.plunder) {\n          for (const plunder of plunderCollection) {\n            // Stack the chips in sets of 3\n            if (\n              droppedPlunder.length === 0 ||\n              droppedPlunder[droppedPlunder.length - 1].length === 3\n            ) {\n              droppedPlunder.push([]);\n            }\n\n            droppedPlunder[droppedPlunder.length - 1].push(plunder);\n          }\n        }\n      }\n\n      // Reset player\n      player.plunder = [];\n      player.position = -1;\n      player.hasTurnedBack = false;\n      player.willTurnBack = false;\n      player.finished = false;\n\n      console.log(\"Players new money is \" + player.money);\n    }\n\n    // Remove plundered rune chips\n    for (let i = chips.length - 1; i >= 0; i--) {\n      let chip = chips[i];\n      chip.player = null;\n      if (chip.plundered) {\n        chips.splice(i, 1);\n      }\n    }\n\n    // Add dropped plunder to the bottom of the ocean\n    for (const dropped of droppedPlunder) {\n      chips.push({\n        levels: dropped,\n        plundered: false,\n        position: chips.length,\n      });\n    }\n\n    // Reset the air\n    let air = {\n      max: this.state.air.max,\n      current: this.state.air.max,\n    };\n\n    // Increase the round\n    let round = {\n      current: this.state.round.current + 1,\n      max: this.state.round.max,\n    };\n\n    this.setState({\n      gameState: \"roundOver\",\n      air: air,\n      players: players,\n      round: round,\n      chips: chips,\n      availablePlunder: availablePlunder,\n    });\n  }\n\n  endGame() {\n    // Calculate the scoreboard\n    const gameEndScore = [];\n    let length = 0;\n\n    for (const player of this.state.players) {\n      if (player.money in gameEndScore) {\n        gameEndScore[player.money].push(player.name);\n      } else {\n        gameEndScore[player.money] = [player.name];\n        length++;\n      }\n    }\n\n    // Unsparse the array for better rendering\n    let index = 0;\n    let scoring = []\n    gameEndScore.forEach((players, score) => {\n      index++;\n\n      scoring[length - index] = {\n        players: players,\n        money: score\n      };\n    })\n\n    this.setState({\n      gameState: \"gameOver\",\n      gameEndScore: scoring,\n    });\n  }\n\n  getNextPlayerId(currentPlayerId) {\n    if (currentPlayerId >= this.state.players.length - 1) {\n      return 0;\n    }\n\n    return currentPlayerId + 1;\n  }\n\n  turnBackPlayer() {\n    let players = this.state.players.slice();\n    let currentPlayer = players[this.state.currentPlayerId];\n\n    currentPlayer.willTurnBack = true;\n\n    this.setState({\n      players: players,\n    });\n  }\n}\n\nReactDOM.render(<Game/>, document.getElementById(\"root\"));\n","export const config = {\n    loadPreviousState: false,\n    exampleState: null\n}"],"sourceRoot":""}